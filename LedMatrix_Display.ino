/*
  LedMatrix_display.ino
  
	Copyright (C) 13/10/2019 Leonardo Lisa

	This program is free software; you can redistribute it and/or
	modify it under the terms of the GNU General Public License
	as published by the Free Software Foundation; either version 2
	of the License, or (at your option) any later version.
	This program is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
	GNU General Public License for more details.
	You should have received a copy of the GNU General Public License
	along with this program; if not, write to the Free Software
	Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
	USA.
*/

#define clkPin 10
#define dataPin 9

#define FRAME_COUNT 10
#define FRAME_LENGTH 6
#define FRAME_POSITION 12

// Controls pins from bottom to top row.
uint8_t const rowPinsArray[7] = {8, 7, 6, 5, 4, 3, 2};

uint8_t const fontTable[96][7] = { 
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},   // 0x20, Space 
   {0x04, 0x04, 0x04, 0x04, 0x04, 0x00, 0x04},   // 0x21, ! 
   {0x09, 0x09, 0x12, 0x00, 0x00, 0x00, 0x00},   // 0x22, " 
   {0x0a, 0x0a, 0x1f, 0x0a, 0x1f, 0x0a, 0x0a},   // 0x23, # 
   {0x04, 0x0f, 0x14, 0x0e, 0x05, 0x1e, 0x04},   // 0x24, $ 
   {0x19, 0x19, 0x02, 0x04, 0x08, 0x13, 0x13},   // 0x25, % 
   {0x04, 0x0a, 0x0a, 0x0a, 0x15, 0x12, 0x0d},   // 0x26, & 
   {0x04, 0x04, 0x08, 0x00, 0x00, 0x00, 0x00},   // 0x27, ' 
   {0x02, 0x04, 0x08, 0x08, 0x08, 0x04, 0x02},   // 0x28, ( 
   {0x08, 0x04, 0x02, 0x02, 0x02, 0x04, 0x08},   // 0x29, ) 
   {0x04, 0x15, 0x0e, 0x1f, 0x0e, 0x15, 0x04},   // 0x2a, * 
   {0x00, 0x04, 0x04, 0x1f, 0x04, 0x04, 0x00},   // 0x2b, + 
   {0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x08},   // 0x2c, , 
   {0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00},   // 0x2d, - 
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0c},   // 0x2e, . 
   {0x01, 0x01, 0x02, 0x04, 0x08, 0x10, 0x10},   // 0x2f, / 
   {0x0e, 0x11, 0x13, 0x15, 0x19, 0x11, 0x0e},   // 0x30, 0 
   {0x04, 0x0c, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x31, 1 
   {0x0e, 0x11, 0x01, 0x02, 0x04, 0x08, 0x1f},   // 0x32, 2 
   {0x0e, 0x11, 0x01, 0x06, 0x01, 0x11, 0x0e},   // 0x33, 3 
   {0x02, 0x06, 0x0a, 0x12, 0x1f, 0x02, 0x02},   // 0x34, 4 
   {0x1f, 0x10, 0x1e, 0x01, 0x01, 0x11, 0x0e},   // 0x35, 5 
   {0x06, 0x08, 0x10, 0x1e, 0x11, 0x11, 0x0e},   // 0x36, 6 
   {0x1f, 0x01, 0x02, 0x04, 0x08, 0x08, 0x08},   // 0x37, 7 
   {0x0e, 0x11, 0x11, 0x0e, 0x11, 0x11, 0x0e},   // 0x38, 8 
   {0x0e, 0x11, 0x11, 0x0f, 0x01, 0x02, 0x0c},   // 0x39, 9 
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x0c, 0x00},   // 0x3a, : 
   {0x00, 0x0c, 0x0c, 0x00, 0x0c, 0x04, 0x08},   // 0x3b, ; 
   {0x02, 0x04, 0x08, 0x10, 0x08, 0x04, 0x02},   // 0x3c, < 
   {0x00, 0x00, 0x1f, 0x00, 0x1f, 0x00, 0x00},   // 0x3d, = 
   {0x08, 0x04, 0x02, 0x01, 0x02, 0x04, 0x08},   // 0x3e, > 
   {0x0e, 0x11, 0x01, 0x02, 0x04, 0x00, 0x04},   // 0x3f, ? 
   {0x0e, 0x11, 0x17, 0x15, 0x17, 0x10, 0x0f},   // 0x40, @ 
   {0x04, 0x0a, 0x11, 0x11, 0x1f, 0x11, 0x11},   // 0x41, A 
   {0x1e, 0x11, 0x11, 0x1e, 0x11, 0x11, 0x1e},   // 0x42, B 
   {0x0e, 0x11, 0x10, 0x10, 0x10, 0x11, 0x0e},   // 0x43, C 
   {0x1e, 0x09, 0x09, 0x09, 0x09, 0x09, 0x1e},   // 0x44, D 
   {0x1f, 0x10, 0x10, 0x1c, 0x10, 0x10, 0x1f},   // 0x45, E 
   {0x1f, 0x10, 0x10, 0x1f, 0x10, 0x10, 0x10},   // 0x46, F 
   {0x0e, 0x11, 0x10, 0x10, 0x13, 0x11, 0x0f},   // 0x37, G 
   {0x11, 0x11, 0x11, 0x1f, 0x11, 0x11, 0x11},   // 0x48, H 
   {0x0e, 0x04, 0x04, 0x04, 0x04, 0x04, 0x0e},   // 0x49, I 
   {0x1f, 0x02, 0x02, 0x02, 0x02, 0x12, 0x0c},   // 0x4a, J 
   {0x11, 0x12, 0x14, 0x18, 0x14, 0x12, 0x11},   // 0x4b, K 
   {0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x1f},   // 0x4c, L 
   {0x11, 0x1b, 0x15, 0x11, 0x11, 0x11, 0x11},   // 0x4d, M 
   {0x11, 0x11, 0x19, 0x15, 0x13, 0x11, 0x11},   // 0x4e, N 
   {0x0e, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x4f, O 
   {0x1e, 0x11, 0x11, 0x1e, 0x10, 0x10, 0x10},   // 0x50, P 
   {0x0e, 0x11, 0x11, 0x11, 0x15, 0x12, 0x0d},   // 0x51, Q 
   {0x1e, 0x11, 0x11, 0x1e, 0x14, 0x12, 0x11},   // 0x52, R 
   {0x0e, 0x11, 0x10, 0x0e, 0x01, 0x11, 0x0e},   // 0x53, S 
   {0x1f, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x54, T 
   {0x11, 0x11, 0x11, 0x11, 0x11, 0x11, 0x0e},   // 0x55, U 
   {0x11, 0x11, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x56, V 
   {0x11, 0x11, 0x11, 0x15, 0x15, 0x1b, 0x11},   // 0x57, W 
   {0x11, 0x11, 0x0a, 0x04, 0x0a, 0x11, 0x11},   // 0x58, X 
   {0x11, 0x11, 0x0a, 0x04, 0x04, 0x04, 0x04},   // 0x59, Y 
   {0x1f, 0x01, 0x02, 0x04, 0x08, 0x10, 0x1f},   // 0x5a, Z 
   {0x0e, 0x08, 0x08, 0x08, 0x08, 0x08, 0x0e},   // 0x5b, [ 
   {0x10, 0x10, 0x08, 0x04, 0x02, 0x01, 0x01},   // 0x5c, backslash
   {0x0e, 0x02, 0x02, 0x02, 0x02, 0x02, 0x0e},   // 0x5d, ] ?^
   {0x04, 0x0a, 0x11, 0x00, 0x00, 0x00, 0x00},   // 0x5e, ^ 
   {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f},   // 0x5f, _ 
   {0x04, 0x04, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x60, ` ?a
   {0x00, 0x0e, 0x01, 0x0d, 0x13, 0x13, 0x0d},   // 0x61, a 
   {0x10, 0x10, 0x10, 0x1c, 0x12, 0x12, 0x1c},   // 0x62, b 
   {0x00, 0x00, 0x00, 0x0e, 0x10, 0x10, 0x0e},   // 0x63, c 
   {0x01, 0x01, 0x01, 0x07, 0x09, 0x09, 0x07},   // 0x64, d 
   {0x00, 0x00, 0x0e, 0x11, 0x1f, 0x10, 0x0f},   // 0x65, e 
   {0x06, 0x09, 0x08, 0x1c, 0x08, 0x08, 0x08},   // 0x66, f 
   {0x0e, 0x11, 0x13, 0x0d, 0x01, 0x01, 0x0e},   // 0x67, g 
   {0x10, 0x10, 0x10, 0x16, 0x19, 0x11, 0x11},   // 0x68, h 
   {0x00, 0x04, 0x00, 0x0c, 0x04, 0x04, 0x0e},   // 0x69, i 
   {0x02, 0x00, 0x06, 0x02, 0x02, 0x12, 0x0c},   // 0x6a, j 
   {0x10, 0x10, 0x12, 0x14, 0x18, 0x14, 0x12},   // 0x6b, k 
   {0x0c, 0x04, 0x04, 0x04, 0x04, 0x04, 0x04},   // 0x6c, l 
   {0x00, 0x00, 0x0a, 0x15, 0x15, 0x11, 0x11},   // 0x6d, m 
   {0x00, 0x00, 0x16, 0x19, 0x11, 0x11, 0x11},   // 0x6e, n 
   {0x00, 0x00, 0x0e, 0x11, 0x11, 0x11, 0x0e},   // 0x6f, o 
   {0x00, 0x1c, 0x12, 0x12, 0x1c, 0x10, 0x10},   // 0x70, p 
   {0x00, 0x07, 0x09, 0x09, 0x07, 0x01, 0x01},   // 0x71, q 
   {0x00, 0x00, 0x16, 0x19, 0x10, 0x10, 0x10},   // 0x72, r 
   {0x00, 0x00, 0x0f, 0x10, 0x0e, 0x01, 0x1e},   // 0x73, s 
   {0x08, 0x08, 0x1c, 0x08, 0x08, 0x09, 0x06},   // 0x74, t 
   {0x00, 0x00, 0x11, 0x11, 0x11, 0x13, 0x0d},   // 0x75, u 
   {0x00, 0x00, 0x11, 0x11, 0x11, 0x0a, 0x04},   // 0x76, v 
   {0x00, 0x00, 0x11, 0x11, 0x15, 0x15, 0x0a},   // 0x77, w 
   {0x00, 0x00, 0x11, 0x0a, 0x04, 0x0a, 0x11},   // 0x78, x 
   {0x00, 0x11, 0x11, 0x0f, 0x01, 0x11, 0x0e},   // 0x79, y 
   {0x00, 0x00, 0x1f, 0x02, 0x04, 0x08, 0x1f},   // 0x7a, z 
   {0x06, 0x08, 0x08, 0x10, 0x08, 0x08, 0x06},   // 0x7b, { 
   {0x04, 0x04, 0x04, 0x00, 0x04, 0x04, 0x04},   // 0x7c, | 
   {0x0c, 0x02, 0x02, 0x01, 0x02, 0x02, 0x0c},   // 0x7d, } 
   {0x08, 0x15, 0x02, 0x00, 0x00, 0x00, 0x00},   // 0x7e, ~ 
   {0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f}   // 0x7f, DEL 
};

char displayBuffer[19] = " AULA LASER        ";
// IMPORTANT! Fill the messagge buffer with 19 characters; extra characters will be ignored.
char animation1[FRAME_COUNT][FRAME_LENGTH] = {
    "      ",
    "-     ",
    "--    ",
    "---   ",
    "----  ",
    "----- ",
    "-----*",
    "----- ",
    "-----*",
    "-----*"};

unsigned long lastMillis = 0;
uint8_t frame = 0;

void setup()
{
  pinMode(clkPin, OUTPUT);
  pinMode(dataPin, OUTPUT);

  for (uint8_t j = 0; j != 7; j++)
  {
    pinMode(rowPinsArray[j], OUTPUT);
  }
}

void loop()
{
  Animation1();

  // Use a loop or a ISR routine.
  Display();
}

void ShiftOut(uint8_t val)
{
  for (uint8_t i = 0; i < 5; i++)
  {
    digitalWrite(dataPin, !!(val & (1 << i)));
    digitalWrite(clkPin, HIGH);
    digitalWrite(clkPin, LOW);
  }
}

void Display()
{
  // The character is displayed from top to bottom.
  for (uint8_t i = 0; i != 7; i++)
  {
    // All row off.
    for (uint8_t j = 0; j != 7; j++)
    {
      digitalWrite(rowPinsArray[j], HIGH);
    }
    // Starts from the last character.
    for (char c = 18; c >= 0; c--)
    {
      ShiftOut(fontTable[displayBuffer[c] - 32][i]);
    }
    // Row launch, active low.
    digitalWrite(rowPinsArray[i], LOW);
    delayMicroseconds(500);
  }
}

void Animation1()
{
  if (millis() - lastMillis >= 500)
  {
    lastMillis = millis();

    if (frame >= (FRAME_COUNT - 1))
    {
      frame = 0;
    }
    else
    {
      frame++;
    }

    for (uint8_t i = 0; i < FRAME_LENGTH; i++)
    {
      displayBuffer[FRAME_POSITION + i] = animation1[frame][i];
    }
  }
}
